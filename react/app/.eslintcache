[{"/Users/matt/Work/Git/NAMC/namc-bug-db/react/app/src/index.tsx":"1","/Users/matt/Work/Git/NAMC/namc-bug-db/react/app/src/serviceWorker.ts":"2","/Users/matt/Work/Git/NAMC/namc-bug-db/react/app/src/App.tsx":"3","/Users/matt/Work/Git/NAMC/namc-bug-db/react/app/src/App.style.ts":"4"},{"size":930,"mtime":1606933042444,"results":"5","hashOfConfig":"6"},{"size":6088,"mtime":1606933042445,"results":"7","hashOfConfig":"6"},{"size":541,"mtime":1606933042443,"results":"8","hashOfConfig":"6"},{"size":151,"mtime":1606933042443,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1q0ey9g",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"/Users/matt/Work/Git/NAMC/namc-bug-db/react/app/src/index.tsx",[],[],"/Users/matt/Work/Git/NAMC/namc-bug-db/react/app/src/serviceWorker.ts",["22","23"],"/* eslint-disable @typescript-eslint/no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL as string, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","/Users/matt/Work/Git/NAMC/namc-bug-db/react/app/src/App.tsx",["24","25"],"import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Container from '@material-ui/core/Container'\nimport { makeStyles } from '@material-ui/core/styles'\nimport style from './App.style'\n\nconst useStyles = makeStyles(style)\n\ninterface Props {\n    history: any\n}\n\nconst App: React.FC<Props> = ({ history }: Props) => {\n    const classes = useStyles()\n\n    return (\n        <Container className={classes.root}>\n            <Typography>This is an app</Typography>\n        </Container>\n    )\n}\n\nexport default App\n","/Users/matt/Work/Git/NAMC/namc-bug-db/react/app/src/App.style.ts",["26","27","28","29","30"],"import { Theme, StyleRules } from '@material-ui/core'\n\nexport default (theme: Theme): StyleRules => ({\n    appFrame: {\n        height: '100%'\n    }\n})\n",{"ruleId":"31","severity":1,"message":"32","line":27,"column":8,"nodeType":"33","messageId":"34","endLine":27,"endColumn":42},{"ruleId":"31","severity":1,"message":"32","line":130,"column":8,"nodeType":"33","messageId":"34","endLine":130,"endColumn":29},{"ruleId":"35","severity":1,"message":"36","line":10,"column":14,"nodeType":"37","messageId":"38","endLine":10,"endColumn":17,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":13,"column":33,"nodeType":"42","messageId":"43","endLine":13,"endColumn":40},{"ruleId":"44","severity":1,"message":"45","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":15},{"ruleId":"40","severity":1,"message":"45","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":15},{"ruleId":"44","severity":1,"message":"46","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":27},{"ruleId":"40","severity":1,"message":"46","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":27},{"ruleId":"40","severity":1,"message":"47","line":3,"column":17,"nodeType":"42","messageId":"43","endLine":3,"endColumn":29},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["48","49"],"@typescript-eslint/no-unused-vars","'history' is defined but never used.","Identifier","unusedVar","no-unused-vars","'Theme' is defined but never used.","'StyleRules' is defined but never used.","'theme' is defined but never used.",{"messageId":"50","fix":"51","desc":"52"},{"messageId":"53","fix":"54","desc":"55"},"suggestUnknown",{"range":"56","text":"57"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"56","text":"58"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[287,290],"unknown","never"]