CREATE EXTENSION postgis;

/*
 agency_id              unique agency identifier
 agency_name            agency name
 is_visible             true when available for new records in UI
 */
CREATE TABLE agencies (
    agency_id           INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    agency_name         VARCHAR(100) NOT NULL,
    category            VARCHAR(20) NOT NULL,
    is_visible          BOOLEAN NOT NULL DEFAULT TRUE,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE agencies IS 'customer agencies (e.g. BLM)';

CREATE INDEX ix_agencies_category ON agencies(category);
CREATE INDEX ux_agencies_name ON agencies(agency_name, category);

CREATE TABLE units (
    unit_id             INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    unit_name           VARCHAR(50) UNIQUE NOT NULL,
    abbreviation        VARCHAR(10) UNIQUE NOT NULL,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- TODO: table design incomplete. Need to implement roles here.
-- TODO: do we really need gender and other non-bug identification information
CREATE TABLE users (
    user_id             INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name          VARCHAR(50) NOT NULL,
    last_name           VARCHAR(50) NOT NULL,
    initials            VARCHAR(2) NOT NULL,
    email               VARCHAR(75) NOT NULL UNIQUE,
    phone               VARCHAR(50),
    notes               TEXT
);

CREATE TABLE life_stages (
    life_stage_id       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    abbreviation        VARCHAR(1) UNIQUE NOT NULL,
    life_stage_name     VARCHAR(10) UNIQUE NOT NULL,
    is_visible          BOOLEAN NOT NULL DEFAULT TRUE,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE ecosystems (
    ecosystem_id        INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ecosystem_name      VARCHAR(10) UNIQUE NOT NULL,
    is_visible          BOOLEAN NOT NULL DEFAULT TRUE,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE land_uses (
    land_use_id         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    land_use_name       VARCHAR(50) UNIQUE NOT NULL,
    is_visible          BOOLEAN NOT NULL DEFAULT TRUE,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE habitats (
    habitat_id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    habitat_name        VARCHAR(50) UNIQUE NOT NULL,
    ecosystem_id        INT NOT NULL,
    is_visible          BOOLEAN NOT NULL DEFAULT TRUE,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_habitats_ecosystem_id FOREIGN KEY (ecosystem_id) REFERENCES ecosystems(ecosystem_id)
);
CREATE INDEX ix_habitats_ecosystem_id ON habitats(ecosystem_id);

CREATE TABLE sample_types (
    sample_type_id      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sample_type_name    VARCHAR(20) UNIQUE NOT NULL,
    is_visible          BOOLEAN NOT NULL DEFAULT TRUE,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE sample_methods (
    sample_method_id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sample_method_name  VARCHAR(20) UNIQUE NOT NULL,
    is_visible          BOOLEAN NOT NULL DEFAULT TRUE,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE systems (
    system_id           INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    system_name         VARCHAR(20) UNIQUE NOT NULL,
    ecosystem_id        INT NOT NULL,
    is_visible          BOOLEAN NOT NULL DEFAULT TRUE,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_systems_ecosystem_id FOREIGN KEY (ecosystem_id) REFERENCES ecosystems(ecosystem_id)
);
CREATE INDEX ix_systems_ecosystem_id ON systems(ecosystem_id);

-- TODO: table design incomplete
CREATE TABLE predictors (
    predictor_id        INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    predictor_name      VARCHAR(50) UNIQUE NOT NULL,
    notes               TEXT,
    unit_id             INT NOT NULL,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_predictors_unit_id FOREIGN KEY (unit_id) REFERENCES units(unit_id)
);
CREATE INDEX ix_predictors_unit_id ON predictors(unit_id);

CREATE TABLE countries (
    country_id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    country_name        VARCHAR(50) UNIQUE NOT NULL,
    abbreviation        VARCHAR(5) NOT NULL,
    geom                GEOMETRY(MultiPolygon, 4326),
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX ix_countries_geom ON countries USING GIST(geom);

CREATE TABLE states (
    state_id            INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    country_id          INT NOT NULL,
    state_name          VARCHAR(50) NOT NULL,
    abbreviation        VARCHAR(2) NOT NULL,
    geom                GEOMETRY(MultiPolygon, 4326),
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_states_country_id FOREIGN KEY (country_id) REFERENCES countries(country_id)
);
CREATE INDEX ix_states_country_id ON states(country_id);
CREATE UNIQUE INDEX ux_states_name ON states(country_id, state_name);
CREATE UNIQUE INDEX ux_states_abbreviation ON states(country_id, abbreviation);
CREATE INDEX ix_states_geom ON states USING GIST(geom);

CREATE TABLE counties (
    county_id           INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    state_id            INT NOT NULL,
    county_name         VARCHAR(255) NOT NULL,
    geom                GEOMETRY(MultiPolygon, 4326),
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_counties_state_id FOREIGN KEY (state_id) REFERENCES states(state_id)
);
CREATE INDEX ix_counties_state_id ON counties(state_id);
CREATE UNIQUE INDEX ux_counties_name ON counties(state_id, county_name);
CREATE INDEX ix_counties_geom ON counties USING GIST(geom);

-- TODO: table design incomplete
CREATE TABLE model_types (
    model_type_id       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_type_name     VARCHAR(50) UNIQUE NOT NULL,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- TODO: table design incomplete
-- TODO: determine if state_id can be NOT NULL. Allowing NULL might enable national level models.
CREATE TABLE models (
    model_id            INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_name          VARCHAR(255) UNIQUE NOT NULL,
    model_type_id       INT NOT NULL,
    state_id            INT NOT NULL,
    is_active           BOOLEAN NOT NULL DEFAULT TRUE,
    notes               TEXT,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_models_model_type_id FOREIGN KEY (model_type_id) REFERENCES model_types(model_type_id),
    CONSTRAINT fk_models_state_id FOREIGN KEY (state_id) REFERENCES states(state_id)
);
CREATE INDEX ix_models_model_type_id ON models(model_type_id);
CREATE INDEX ix_models_state_id ON models(state_id);

CREATE TABLE model_predictors (
    model_id            INT NOT NULL,
    predictor_id        INT NOT NULL,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT pk_model_predictors PRIMARY KEY (model_id, predictor_id),
    CONSTRAINT fk_model_predictors_model_id FOREIGN KEY (model_id) REFERENCES models(model_id),
    CONSTRAINT fk_model_predictors_predictor_id FOREIGN KEY (predictor_id) REFERENCES predictors(predictor_id)
);

-- TODO: table desgin incomplete
CREATE TABLE sites (
    site_id             INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    site_name           VARCHAR(50) UNIQUE NOT NULL,
    description         TEXT,
    waterbody           VARCHAR(255),
    geom                GEOMETRY(Point, 4326) NOT NULL,
    NHDPlusID           BIGINT,
    COMID               BIGINT,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX ix_sites_geom ON sites USING GIST(geom);

-- TODO: Determine if all predictors are floating point. If not then consider either separate tables or using JSON
CREATE TABLE site_predictors (
    site_id             INT NOT NULL,
    predictor_id        INT NOT NULL,
    predictor_value     REAL,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT pk_site_predictors PRIMARY KEY (site_id, predictor_id),
    CONSTRAINT fk_site_predictors_site_id FOREIGN KEY (site_id) REFERENCES sites(site_id),
    CONSTRAINT fk_site_predictors_predictor_id FOREIGN KEY (predictor_id) REFERENCES predictors(predictor_id)
);

-- TODO: Phone, Fax, Email, LastContact, Notes, Group all NULL in front end database. Needed?
-- TODO: instead of last_contact consider a separate customer_contact table with timestamps etc
-- TODO: country is redundant if you have state. Is this OK?
CREATE TABLE customers (
    customer_id         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_name       VARCHAR(255) UNIQUE NOT NULL,
    street1             VARCHAR(255),
    street2             VARCHAR(255),
    city                VARCHAR(255),
    state_id            INT NOT NULL,
    zip_code            VARCHAR(20),
    phone               VARCHAR(50),
    fax                 VARCHAR(50),
    email               VARCHAR(255),
    notes               TEXT,
    last_contact        TIMESTAMPTZ,

    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_customers_state_id FOREIGN KEY (state_id) REFERENCES states(state_id)
);
CREATE INDEX ix_customers_country_id ON customers(state_id);

CREATE TABLE box_statuses (
    status_id           INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    box_status_name     VARCHAR(50) UNIQUE NOT NULL
);

-- TODO: table design incomplete
CREATE TABLE boxes (
    box_id              INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id         INT NOT NULL,
    status_id           INT NOT NULL,
    projected_date      TIMESTAMPTZ,
    completed_date      TIMESTAMPTZ,
    measurements        BOOLEAN NOT NULL DEFAULT FALSE,
    sorter_qa           BOOLEAN NOT NULL DEFAULT FALSE,
    taxa_qa             BOOLEAN NOT NULL DEFAULT FALSE,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_boxes_customer_id FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    CONSTRAINT fk_boxes_status_id FOREIGN KEY (status_id) REFERENCES box_statuses(status_id)
);
CREATE INDEX ix_boxes_customer_id ON boxes(customer_id);
CREATE INDEX ix_boxes_status_id ON boxes(status_id);

-- TODO: Verify that it's OK to make qualitative NOT NULL and check what the default should be
-- TODO: verify that Count field is not needed?
-- TODO: verify that SorterChironomidae is needed?
CREATE TABLE samples (
    sample_id           INT GENERATED BY DEFAULT AS IDENTITY,
    box_id              INT NOT NULL,
    site_id             INT,
    sample_date         DATE,
    type_id             INT NOT NULL,
    method_id           INT NOT NULL,
    habitat_id          INT NOT NULL,
    area                REAL,
    field_split         REAL,
    field_notes         TEXT,
    lab_split           REAL,
    elutriation         BOOLEAN,
    qualitative         BOOLEAN DEFAULT FALSE,
    lab_notes           TEXT,
    mesh                REAL,
    sorter_count        SMALLINT,
    sorter_id           INT,
    sort_time           REAL NOT NULL DEFAULT 0,
    sort_start_date     TIMESTAMPTZ,
    sort_end_date       TIMESTAMPTZ,
    ider_id             INT,
    id_time             REAL NOT NULL DEFAULT 0,
    id_start_date       TIMESTAMPTZ,
    id_end_date         TIMESTAMPTZ,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    qa_sample_id        INT,

    CONSTRAINT pk_samples PRIMARY KEY (sample_id),
    CONSTRAINT fk_samples_box_id FOREIGN KEY (box_id) REFERENCES boxes(box_id),
    CONSTRAINT fk_samples_site_id FOREIGN KEY (site_id) REFERENCES sites(site_id),
    CONSTRAINT fk_samples_type_id FOREIGN KEY (type_id) REFERENCES sample_types(sample_type_id),
    CONSTRAINT fk_samples_method_id FOREIGN KEY (method_id) REFERENCES sample_methods(sample_method_id),
    CONSTRAINT fk_samples_habitat_id FOREIGN KEY (habitat_id) REFERENCES habitats(habitat_id),
    CONSTRAINT fk_samples_sorter_id FOREIGN KEY (sorter_id) REFERENCES users(user_id),
    CONSTRAINT fk_samples_ider_id FOREIGN KEY (ider_id) REFERENCES users(user_id),
    CONSTRAINT ck_samples_area CHECK (area >= 0),
    CONSTRAINT ck_samples_field_split CHECK (field_split >= 0),
    CONSTRAINT ck_samples_lab_split CHECK (lab_split >= 0),
    CONSTRAINT chk_samples_sorter_count CHECK (sorter_count >= 0)
);
CREATE INDEX ix_samples_box_id ON samples(box_id);
CREATE INDEX ix_samples_site_id ON samples(site_id);
CREATE INDEX ix_samples_type_id ON samples(type_id);
CREATE INDEX ix_samples_method_id ON samples(method_id);
CREATE INDEX ix_samples_habitat_id ON samples(habitat_id);

CREATE TYPE TOW_TYPES AS ENUM ('Vertical', 'Horizontal');

CREATE TABLE plantkton (
    sample_id           INT NOT NULL,
    diameter            REAL,
    sub_sample_count    SMALLINT,
    tow_length          REAL,
    volume              REAL,
    all_quot            REAL,
    size_interval       REAL,
    tow_type            TOW_TYPES,
    notes               TEXT,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT pk_plankton PRIMARY KEY (sample_id),
    CONSTRAINT fk_plankton_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id),
    CONSTRAINT ck_plankton_diameter CHECK (diameter >= 0),
    CONSTRAINT ck_plankton_sub_sample_count CHECK (sub_sample_count >= 0),
    CONSTRAINT ck_plankton_tow_length CHECK (tow_length >= 0),
    CONSTRAINT ck_plankton_volume CHECK (volume >=0),
    CONSTRAINT ck_plankton_size_interval CHECK (size_interval >= 0)
);


CREATE TABLE sample_models (
    sample_id           INT NOT NULL,
    model_id            INT NOT NULL,
    model_result        DOUBLE PRECISION,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT pk_sample_models PRIMARY KEY (sample_id, model_id),
    CONSTRAINT fk_sample_models_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id),
    CONSTRAINT fk_samples_model_id FOREIGN KEY (model_id) REFERENCES models(model_id)
);
CREATE INDEX ix_sample_models_sample_id ON sample_models(sample_id);
CREATE INDEX ix_sample_models_model_id ON sample_models(model_id);

-- TODO: table design incomplete
CREATE TABLE taxa_levels(
    taxa_level_id       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    taxa_level_name     VARCHAR(20) UNIQUE NOT NULL,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE taxa (
    taxa_id             INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    taxa_name           VARCHAR(255) NOT NULL,
    taxa_level_id       INT NOT NULL,
    parent_taxa_id      INT,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_taxa_taxa_level_id FOREIGN KEY (taxa_level_id) REFERENCES taxa_levels(taxa_level_id),
    CONSTRAINT fk_taxa_parent_taxa_id FOREIGN KEY (parent_taxa_id) REFERENCES taxa(taxa_id)
);
CREATE INDEX ix_taxa_taxa_level_id ON taxa_levels(taxa_level_id);

CREATE TABLE stomachs (
    sample_id           INT NOT NULL,
    taxa_id             INT NOT NULL,
    fish_length         REAL,
    fish_mass           REAL,
    notes               TEXT,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT pk_stomachs PRIMARY KEY (sample_id),
    CONSTRAINT fk_stomachs_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id),
    CONSTRAINT fk_stomaches_taxa_id FOREIGN KEY (taxa_id) REFERENCES taxa(taxa_id),
    CONSTRAINT ck_stomachs_fish_length CHECK (fish_length >= 0),
    CONSTRAINT ck_stomachs_fish_mass CHECK (fish_mass >= 0)
);
CREATE INDEX stomachs_taxa_id ON stomachs(taxa_id);


-- TODO: would be nice to have default for valid
-- TODO: Review choice of small int for big_rare_count
-- TODO: Review defaults and not null ofr split_count and big_rare_count
CREATE TABLE bug_data (
    sample_id           INT NOT NULL,
    taxa_id             INT NOT NULL,
    life_stage_id       INT NOT NULL,
    bug_size            REAL,
    split_count         float NOT NULL,
    big_rare_count      SMALLINT,
    notes               TEXT,
    valid               BOOLEAN,

    CONSTRAINT pk_bug_data PRIMARY KEY (sample_id, taxa_id, life_stage_id),
    CONSTRAINT fk_bug_data_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id),
    CONSTRAINT fk_bug_data_taxa_id FOREIGN KEY (taxa_id) REFERENCES taxa(taxa_id),
    CONSTRAINT fk_bug_data_life_stage_id FOREIGN KEY (life_stage_id) REFERENCES life_stages(life_stage_id),
    CONSTRAINT ck_bug_data_bug_size CHECK (bug_size > 0),
    CONSTRAINT ck_bug_data_split_count CHECK ((split_count >= 0) AND (split_count <= 100)),
    CONSTRAINT ck_bug_data_big_rare_count CHECK (big_rare_count >= 0)
);

-- TODO: constraints on tpoints and spoints?
CREATE TABLE veg_samples (
    sample_id           INT NOT NULL,
    taxa_id             INT NOT NULL,
    tpoints             REAL,
    spoints             REAL,
    notes               TEXT,
    created_date        TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_date        TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT pk_veg_samples PRIMARY KEY (sample_id),
    CONSTRAINT fk_veg_samples_sample_id FOREIGN KEY (sample_id) REFERENCES samples(sample_id),
    CONSTRAINT fk_veg_samples_species_id FOREIGN KEY (taxa_id) REFERENCES taxa(taxa_id)
);
CREATE INDEX fx_veg_samples_taxa_id ON veg_samples(taxa_id);

